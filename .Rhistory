View(df)
View(df)
# Necessary libraries to run all the code chunks and plots
library(readxl)
library(dplyr)
library(car)
library(lmtest)
library(zoo)
library(caret)
#Read the data using the read_excel function
#Change here for current data path
data <- read_excel("C:/Users/CAMILO/Documents/GitHub/unipd_sl_24/data/data.xlsx",sheet = "dataframe_col")
View(data)
#Present the first 5 rows of the data
head(data,5)
# Counting NA values in each column
na_counts <- apply(data, 2, function(x) sum(is.na(x)))
# Print the counts of NA values per column
print(na_counts)
# Interpolate finished_constructions
# Interpolate NA values in the finished_constructions column
# Interpolate internal NA values in the finished_constructions column
data$finished_constructions <- na.approx(data$finished_constructions, na.rm = FALSE)
# Fill leading NA values with the first non-NA value
data$finished_constructions <- na.locf(data$finished_constructions, na.rm = FALSE, fromLast = FALSE)
# Fill trailing NA values with the last non-NA value
data$finished_constructions <- na.locf(data$finished_constructions, na.rm = FALSE, fromLast = TRUE)
# Fill trailing NA values with the last non-NA value
data$finished_constructions <- na.locf(data$finished_constructions, na.rm = FALSE, fromLast = TRUE)
# Removing rows with any NA values
clean_data <- na.omit(data)
data_reduced <- subset(clean_data, select = -c(MY))
View(data_reduced)
# View description --------------
# Get the summary of the dataframe
summary_stats <- summary(select(data_reduced,-date))
# Print the summary statistics
print(summary_stats)
detect_outliers <- function(df) {
outlier_bounds <- df %>%
summarise(across(everything(), list(
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE)
)))
bounds <- outlier_bounds %>%
mutate(across(everything(), list(
IQR = ~Q3 - Q1,
lower_bound = ~Q1 - 1.5 * IQR,
upper_bound = ~Q3 + 1.5 * IQR
))) %>%
select(ends_with("_lower_bound"), ends_with("_upper_bound"))
outliers <- lapply(names(df), function(var) {
lower_bound <- bounds[[paste0(var, "_lower_bound")]]
upper_bound <- bounds[[paste0(var, "_upper_bound")]]
df %>% filter((!!sym(var) < lower_bound) | (!!sym(var) > upper_bound)) %>% select(all_of(var))
})
names(outliers) <- names(df)
return(outliers)
}
# Detect outliers in the dataset
outliers <- detect_outliers(select(data_reduced,-date))
detect_outliers <- function(df) {
outlier_bounds <- df %>%
summarise(across(everything(), list(
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE)
)))
bounds <- outlier_bounds %>%
rowwise() %>%
mutate(across(everything(), list(
IQR = ~ get(paste0(cur_column(), "_Q3")) - get(paste0(cur_column(), "_Q1")),
lower_bound = ~ get(paste0(cur_column(), "_Q1")) - 1.5 * get(paste0(cur_column(), "_IQR")),
upper_bound = ~ get(paste0(cur_column(), "_Q3")) + 1.5 * get(paste0(cur_column(), "_IQR"))
))) %>%
ungroup() %>%
select(ends_with("_lower_bound"), ends_with("_upper_bound"))
outliers <- lapply(names(df), function(var) {
lower_bound <- bounds[[paste0(var, "_lower_bound")]]
upper_bound <- bounds[[paste0(var, "_upper_bound")]]
df %>% filter((!!sym(var) < lower_bound) | (!!sym(var) > upper_bound)) %>% select(all_of(var))
})
names(outliers) <- names(df)
return(outliers)
}
# Detect outliers in the dataset
outliers <- detect_outliers(select(data_reduced,-date))
# Function to detect outliers based on IQR
# Function to calculate outliers for a single variable
detect_outliers_single_var <- function(column) {
Q1 <- quantile(column, 0.25, na.rm = TRUE)
Q3 <- quantile(column, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column[column < lower_bound | column > upper_bound]
return(outliers)
}
# List to store outliers for each variable
outliers_list <- list()
# Loop through each column in the dataset and calculate outliers
for (var in colnames(select(data_reduced,-date))) {
if (is.numeric(data[[var]])) {
outliers_list[[var]] <- detect_outliers_single_var(data[[var]])
}
}
# Print outliers for each variable
print(outliers_list)
# Function to detect outliers based on IQR
# Function to calculate outliers for a single variable
detect_outliers_single_var <- function(column) {
column <- na.omit(column)
Q1 <- quantile(column, 0.25, na.rm = TRUE)
Q3 <- quantile(column, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column[column < lower_bound | column > upper_bound]
return(outliers)
}
# List to store outliers for each variable
outliers_list <- list()
# Loop through each column in the dataset and calculate outliers
for (var in colnames(select(data_reduced,-date))) {
if (is.numeric(data[[var]])) {
outliers_list[[var]] <- detect_outliers_single_var(data[[var]])
}
}
# Print outliers for each variable
print(outliers_list)
# pairs(data_reduced) # does not say much
```
# Log-transformation
# Print outliers for each variable
print(outliers_list)
# Create the boxplot without x-axis labels
{boxplot(value ~ variable, data = select(data_reduced,-date),
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
# Create the boxplot without x-axis labels
{boxplot(data = select(data_reduced,-date),
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
# Create the boxplot without x-axis labels
{boxplot( data = select(data_reduced,-date),,
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
data_long <- melt(data_reduced,-date)
data_long <- melt(select(data_reduced,-date))
{boxplot( data = data_long,
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
data_long <- melt(select(data_reduced,-date))
{boxplot( value ~ variable,data = data_long,
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
}
# Create the boxplot without x-axis labels
{boxplot(data_reduced$shipping , horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
}
# Create the boxplot without x-axis labels
{boxplot(data_reduced$y , horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
}
# Create the boxplot without x-axis labels
{boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
}
# Create the boxplot without x-axis labels
par(mfrow = c(3, 1))
{boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
}
{boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
}
{boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
{
par(mfrow = c(3, 1))
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
#Read the data using the read_excel function
#Change here for current data path
data <- read_excel("C:/Users/CAMILO/Documents/GitHub/unipd_sl_24/data/data.xlsx",sheet = "dataframe_col")
View(data)
# Necessary libraries to run all the code chunks and plots
library(readxl)
library(dplyr)
library(car)
library(lmtest)
library(zoo)
library(caret)
#Read the data using the read_excel function
#Change here for current data path
data <- read_excel("C:/Users/CAMILO/Documents/GitHub/unipd_sl_24/data/data.xlsx",sheet = "dataframe_col")
View(data)
#Present the first 5 rows of the data
head(data,5)
# Counting NA values in each column
na_counts <- apply(data, 2, function(x) sum(is.na(x)))
# Print the counts of NA values per column
print(na_counts)
# Convert date column to Date type if it's not already
data$date <- as.Date(data$date)
# Copy the dataframe to avoid modifying the original one
data_filled <- data
# Interpolate finished_constructions
# Find the indices where the date is at the end of a trimester
trimester_end_indices <- which(format(data$date, "%m") %in% c("03", "06", "09", "12"))
# Loop through each trimester end and distribute the value to the previous three months
for (i in trimester_end_indices) {
if (i - 2 > 0) {
# Distribute the value to the current month and the previous two months
value_to_distribute <- data$finished_constructions[i] / 3
data_filled$finished_constructions[i] <- value_to_distribute
data_filled$finished_constructions[i - 1] <- value_to_distribute
data_filled$finished_constructions[i - 2] <- value_to_distribute
}
}
data_filled$finished_constructions <- na.locf(data_filled$finished_constructions, na.rm = FALSE)
View(data_filled)
# Removing rows with any NA values
clean_data <- na.omit(data)
data_reduced <- subset(clean_data, select = -c(MY))
View(data_reduced)
# View description --------------
# Get the summary of the dataframe
summary_stats <- summary(select(data_reduced,-date))
# Print the summary statistics
print(summary_stats)
# Function to detect outliers based on IQR
detect_outliers_single_var <- function(column) {
column <- na.omit(column)
Q1 <- quantile(column, 0.25, na.rm = TRUE)
Q3 <- quantile(column, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column[column < lower_bound | column > upper_bound]
return(outliers)
}
# List to store outliers for each variable
outliers_list <- list()
# Loop through each column in the dataset
for (var in colnames(select(data_reduced,-date))) {
if (is.numeric(data[[var]])) {
outliers_list[[var]] <- detect_outliers_single_var(data[[var]])
}
}
# Print outliers for each variable
print(outliers_list)
{
par(mfrow = c(3, 1))
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
# reset margins
par(mfrow = c(1, 1))
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$y, type = "n", xaxt = "n",xlab="date", ylab = "Home Price Index", main = "Evolution of Home Prices over time")
# Add the categorical labels to the x-axis
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
# Add the lines and points to the plot
lines(1:length(data_reduced$category), data_reduced$y, type = "o", col = "blue", pch = 16)}
{
par(mfrow = c(3, 1))
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
par(mfrow = c(3, 1),mar = c(5, 5, 4, 2) + 0.1)
{
par(mfrow = c(3, 1),mar = c(5, 5, 4, 2) + 0.1)
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
{
par(mfrow = c(3, 1),mar = c(5, 5, 4, 2) + 0.1, oma = c(5, 4, 4, 2), las = 1)
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
{
par(mfrow = c(3, 1), oma = c(5, 4, 4, 2), las = 1)
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
{
par(mfrow = c(3, 1),mar = c(5, 5, 4, 2) + 0.1, oma = c(3, 3, 3, 3), las = 1)
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
{
par(mfrow = c(3, 1),mar = c(5, 5, 4, 2) + 0.1, oma = c(5, 3, 3, 3), las = 1)
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
{
par(mfrow = c(3, 1),mar = c(5, 5, 4, 2) + 0.1)
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
{
par(mfrow = c(3, 1),mar = c(5, 5, 4, 2) + 0.1)
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
# Create Differences (Inflation)
colnames(data_reduced)
# Select subset of variables to difference
variables_to_calculate <- c("y", "industrial_inputs", "metals",
"energy", "shipping", "fx", "industrial_prod",
"construction_licences_area", "finished_constructions",
"google_trends")
# Create a function to calculate the 12-month percentual variation
percentual_variation_12_months <- function(x) {
return((x / dplyr::lag(x, n = 12) - 1))
}
# Apply the function to the subset of variables
data_percentual_variation <- data %>%
mutate(across(all_of(variables_to_calculate), percentual_variation_12_months, .names = "pct_var_{col}"))
View(data_percentual_variation)
# Histograms/Boxplots of the percentual variations
# Subset only percentual changes
data_percentual_variation <- data_percentual_variation %>%
select(pct_var_y, pct_var_industrial_inputs, pct_var_metals, pct_var_energy,
pct_var_shipping, pct_var_fx,pct_var_industrial_prod,
pct_var_construction_licences_area, pct_var_finished_constructions,
pct_var_google_trends,
unemployment, interest_rate)
par(mfrow = c(1, 2))
# Y
{boxplot(data_percentual_variation$pct_var_y , horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
hist(data_percentual_variation$pct_var_y , breaks=40,main = "Histogram of Percentual Variation Y",xlab = "Percentual Variation")}
# Histograms-----------------
par(mar = c(2, 2, 2, 2))  # Adjust margins to make them smaller
# Adjust layout to fit all histograms
par(mfrow = c(3, 5))  # Example layout; adjust if necessary
for (i in 1:ncol(data_percentual_variation)) {
hist(data_percentual_variation[[i]], main = names(data_percentual_variation)[i], xlab = names(data_percentual_variation)[i], col = "blue", border = "black")
}
# Reset layout
par(mfrow = c(1, 1))
pairs(data_percentual_variation)
pairs(data_percentual_variation)
# Boxplot for all at once
#install.packages("reshape2")
library(reshape2)
# Melt the dataframe to long format
# Melt the dataframe to long format
data_long <- melt(data_percentual_variation)
# Melt the dataframe to long format
# Melt the dataframe to long format
data_long <- melt(data_percentual_variation)
# Adjust graphical parameters
par(mar = c(7, 5, 4, 2) + 0.1)  # Increase bottom margin
# Create the boxplot without x-axis labels
{boxplot(value ~ variable, data = data_long,
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
# reset margins
par(mfrow = c(4, 1))
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$shipping, type = "n", xaxt = "n",xlab="date", ylab = "shipping", main = "Evolution of Shipping Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$y, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$energy, type = "n", xaxt = "n",xlab="date", ylab = "energy", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$y, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$unemployment, type = "n", xaxt = "n",xlab="date", ylab = "unemployment", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$y, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$interest_rate, type = "n", xaxt = "n",xlab="date", ylab = "interest_rate", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$y, type = "o", col = "blue", pch = 16)}
# reset margins
par(mfrow = c(4, 1))
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$shipping, type = "n", xaxt = "n",xlab="date", ylab = "shipping", main = "Evolution of Shipping Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$shipping, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$energy, type = "n", xaxt = "n",xlab="date", ylab = "energy", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$energy, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$unemployment, type = "n", xaxt = "n",xlab="date", ylab = "unemployment", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$unemployment, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$interest_rate, type = "n", xaxt = "n",xlab="date", ylab = "interest_rate", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$interest_rate, type = "o", col = "blue", pch = 16)}
View(data_reduced)
# reset margins
par(mfrow = c(4, 1))
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$shipping, type = "n", xaxt = "n",xlab="date", ylab = "shipping", main = "Evolution of Shipping Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$shipping, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$energy, type = "n", xaxt = "n",xlab="date", ylab = "energy", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$energy, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$industrial_prod, type = "n", xaxt = "n",xlab="date", ylab = "Evolution of Industrial Production Index over time", main = "Evolution of unemployment over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$industrial_prod, type = "o", col = "blue", pch = 16)
}
View(data_reduced)
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$shipping, type = "n", xaxt = "n",xlab="date", ylab = "shipping", main = "Evolution of Shipping Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$shipping, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$energy, type = "n", xaxt = "n",xlab="date", ylab = "energy", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$energy, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$industrial_prod, type = "n", xaxt = "n",xlab="date", ylab = "Industry production", main = "Evolution of Industrial Production Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$industrial_prod, type = "o", col = "blue", pch = 16)
}
# Identify columns that do not contain "log"
columns_to_keep <- !grepl("log", names(data_reduced))
# Subset the dataframe to keep only these columns
df_not_log <- data_reduced[, columns_to_keep]
# Display the filtered dataframe
print(df_not_log)
cov_matrix <- cov(select(df_not_log,-date,-category))
cov_matrix
correl_matrix <- cor(select(df_not_log,-date,-category))
correl_matrix
---
title: "statistical_project"
```{=html}
```{=html}
par(mfrow = c(3, 1))
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$shipping, type = "n", xaxt = "n",xlab="date", ylab = "shipping", main = "Evolution of Shipping Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$shipping, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$energy, type = "n", xaxt = "n",xlab="date", ylab = "energy", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$energy, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$industrial_prod, type = "n", xaxt = "n",xlab="date", ylab = "Industry production", main = "Evolution of Industrial Production Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$industrial_prod, type = "o", col = "blue", pch = 16)
}
plot(1:length(data_reduced$category), clean_data$industrial_prod, type = "n", xaxt = "n",xlab="date", ylab = "Industry production", main = "Evolution of Industrial Production Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$industrial_prod, type = "o", col = "blue", pch = 16)
}
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$shipping, type = "n", xaxt = "n",xlab="date", ylab = "shipping", main = "Evolution of Shipping Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$shipping, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$energy, type = "n", xaxt = "n",xlab="date", ylab = "energy", main = "Evolution of Energy Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$energy, type = "o", col = "blue", pch = 16)
plot(1:length(data_reduced$category), clean_data$industrial_prod, type = "n", xaxt = "n",xlab="date", ylab = "Industry production", main = "Evolution of Industrial Production Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$industrial_prod, type = "o", col = "blue", pch = 16)
}
In this project we aim to study the influence of macroeconomics indicators on the house price index in Colombia. This indicator measure the evolution through time of the market prices of residential properties as a percentage change. The idea of the analysis is to present and study the possible effects of the macroeconomics indicators on the house prices through the construction of regression models, evaluating their results and interpreting the models in the context of the data.
## 1. Dataset Introduction and Preprocessing
The dataset was constructed gattering information from multiple sites: the Colombian department of statistics (DANE) , the Colombian central bank (Banco de la Repúlbica), Google trends and the Federal Reserve Economic Data (FRED). In general, all the visited sites present the data as a .csv file with tables according to filters related with the time span of interest. With this we construct a consolidated database un .csv format with the following variables:
| Variable                   | Description                                                                                                    |
These variables present real values,and were selected as they have an initial coherent relation with the housing sector. We present the import process of the data
# Necessary libraries to run all the code chunks and plots
library(readxl)
library(dplyr)
library(car)
library(lmtest)
library(zoo)
library(caret)
