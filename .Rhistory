clean_data <- na.omit(data_filled)
# Drop MY column
data_reduced <- subset(clean_data, select = -c(MY))
summary_stats <- summary(data_reduced[, !(names(data_reduced) %in% c("date"))])
# Function to detect outliers based on IQR
detect_outliers_single_var <- function(column) {
column <- na.omit(column)
Q1 <- quantile(column, 0.25, na.rm = TRUE)
Q3 <- quantile(column, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column[column < lower_bound | column > upper_bound]
return(outliers)
}
# List to store outliers for each variable
outliers_list <- list()
# Loop to determine outliers in each column
for (var in colnames(data_reduced[, !(names(data_reduced) %in% c("date"))])) {
if (is.numeric(data[[var]])) {
outliers_list[[var]] <- detect_outliers_single_var(data[[var]])
}
}
print(outliers_list)
{
par(mfrow = c(2, 2), mar = c(5, 4, 2, 2) + 0.1, oma = c(0, 0, 0, 0))
# First plot: Shipping Price Index
boxplot(data_reduced$Shipping_Price_Index, horizontal = TRUE, frame = FALSE, main = "Shipping Price Index")
# Second plot: Unemployment Rate
boxplot(data_reduced$Unemployment_Rate, horizontal = TRUE, frame = FALSE, main = "Unemployment Rate")
# Third plot: Interest Rate
boxplot(data_reduced$Interest_Rate, horizontal = TRUE, frame = FALSE, main = "Interest Rate")
# Fourth plot: Blank space
plot.new()
}
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1, 1))
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$House_Price_Index, type = "n", xaxt = "n",xlab="date", ylab = "House Price Index", main = "Evolution of House Prices over time",cex.axis=0.8)
# Add the categorical labels to the x-axis
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
# Add the lines and points to the plot
lines(1:length(data_reduced$category), data_reduced$House_Price_Index, type = "o", col = "blue", pch = 16)}
# Select subset of variables to difference
variables_to_calculate <- c("House_Price_Index", "Industrial_Inputs_Index", "Metals_Price_Index",
"Energy_Price_Index", "Shipping_Price_Index", "Forex_Index",
"Industrial_Production_Index", "Construction_Licences_Area",
"Finished_Constructions", "Google_Trends_Housing")
# Create a function to calculate the 12-month percentual variation
percentual_variation_12_months <- function(x) {
return((x / lag(x, n = 12) - 1))
}
lag <- function(x, n) {
c(rep(NA, n), head(x, -n))
}
data_percentual_variation <- data
# Apply the function to the select variables
for (var in variables_to_calculate) {
new_var_name <- paste0("pct_var_", var)
data_percentual_variation[[new_var_name]] <- percentual_variation_12_months(data[[var]])
}
# Histograms/Boxplots of the percentual variations
# Subset only percentual changes
columns_to_select <- c("pct_var_House_Price_Index", "pct_var_Industrial_Inputs_Index", "pct_var_Metals_Price_Index",
"pct_var_Energy_Price_Index", "pct_var_Shipping_Price_Index", "pct_var_Forex_Index",
"pct_var_Industrial_Production_Index", "pct_var_Construction_Licences_Area",
"pct_var_Finished_Constructions", "pct_var_Google_Trends_Housing",
"Unemployment_Rate", "Interest_Rate")
data_percentual_variation <- data_percentual_variation[, columns_to_select]
data_percentual_variation$time_index<- seq(1,nrow(data_percentual_variation))
{
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1, 2))
# Boxplot with color scale for time index
boxplot(data_percentual_variation$pct_var_House_Price_Index, horizontal = TRUE, frame = FALSE,
main = "Boxplot of Percentual Variation House Price Index",
ylab = "Percentual Variation", xlab = "", col = "lightgray", border = "black")
# Generate color scale based on time index
colors <- colorRampPalette(c("green", "red"))(length(data_percentual_variation$time_index))
colored_points <- colors[rank(data_percentual_variation$time_index)]
# Overlay points on the boxplot
points(data_percentual_variation$pct_var_House_Price_Index, rep(1, nrow(data_percentual_variation)),
col = colored_points, pch = 19)
# Add a legend for the color scale
legend("topright", legend = c("Oldest", "Newest"),
fill = c(colors[1], colors[length(colors)]), title = "Time Index")
# Histogram of Percentual Variation House Price Index
hist(data_percentual_variation$pct_var_House_Price_Index, breaks = 40,
main = "Histogram of Percentual Variation House Price Index",
xlab = "Percentual Variation")}
{par(mfrow = c(3,4 ), mar = c(2, 2, 2, 2) + 0.1)
data_percentual_variation <- data_percentual_variation[, columns_to_select]
for (i in 1:ncol(data_percentual_variation)) {
hist(data_percentual_variation[[i]],
main = substr(names(data_percentual_variation)[i], 1, 25), # Shorten title if necessary
xlab = names(data_percentual_variation)[i],
col = "blue",
border = "black",
cex.main=0.7)
}
}
# reset margins
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Reset margins
par(mar = c(5.1, 4.1, 4.1, 2.1))
# Set up a 2x2 plotting space
{par(mfrow = c(2, 2))
# First plot: Evolution of Shipping Prices Index over time
plot(1:length(data_reduced$category), clean_data$Shipping_Price_Index, type = "n", xaxt = "n",
xlab = "date", ylab = "Shipping Price Index", main = "Evolution of Shipping Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$Shipping_Price_Index, type = "o", col = "blue", pch = 16)
# Second plot: Evolution of Finished constructions over time
plot(1:length(data_reduced$category), clean_data$Finished_Constructions, type = "n", xaxt = "n",
xlab = "date", ylab = "Energy Price Index", main = "Evolution of Finished constructions over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$Finished_Constructions, type = "o", col = "blue", pch = 16)
# Third plot: Evolution of Industrial Production Index over time
plot(1:length(data_reduced$category), clean_data$Industrial_Production_Index, type = "n", xaxt = "n",
xlab = "date", ylab = "Industry Production Index", main = "Evolution of Industrial Production Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$Industrial_Production_Index, type = "o", col = "blue", pch = 16)
# Fourth plot: Blank space
plot.new()}
#Log transformation of the variables
variables_to_log <- c("House_Price_Index", "Industrial_Inputs_Index", "Metals_Price_Index",
"Energy_Price_Index", "Shipping_Price_Index", "Forex_Index",
"Industrial_Production_Index", "Construction_Licences_Area",
"Finished_Constructions", "Google_Trends_Housing")
for (var in variables_to_log) {
log_var_name <- paste0(var, "_log")
data_reduced[[log_var_name]] <- log(data_reduced[[var]])
}
# Subset the dataframe
selected_columns <- c(paste0(variables_to_log, "_log"), "Unemployment_Rate", "Interest_Rate")
data_final <- data_reduced[, selected_columns]
cov_matrix <- cov(data_final)
cov_matrix
correl_matrix <- cor(data_final)
correl_matrix
print(correl_matrix)
# Plot the correlation matrix
{par(mar = c(7, 7, 7, 2) + 0.1)
cor_matrix<-correl_matrix
image(1:ncol(cor_matrix), 1:nrow(cor_matrix), t(cor_matrix)[, ncol(cor_matrix):1],
axes = FALSE, xlab = "", ylab = "", col = colorRampPalette(c("red", "white", "blue"))(20))
# Add axis labels
axis(3, at = 1:ncol(cor_matrix), labels = colnames(cor_matrix), las = 2, cex.axis = 0.7)
axis(2, at = 1:nrow(cor_matrix), labels = rev(rownames(cor_matrix)), las = 2, cex.axis = 0.7)
#correlation coefficients
for (i in 1:ncol(cor_matrix)) {
for (j in 1:nrow(cor_matrix)) {
text(i, nrow(cor_matrix) - j + 1, round(cor_matrix[i, j], 2), cex = 0.7)
}
}}
# here a value bigger than 10 is supposed to have high multicolinearity
vif_values <-vif(lm(House_Price_Index_log ~ ., data = data_final))
vif_values
# some variables like shipping, industrial prod, metals and industrial input are high,
# Metals and industrial inputs are very similar / metals is a part of industrial inputs,
# drop metals
data_final$Metals_Price_Index_log<- NULL
# re run multicoliniarity
vif(lm(House_Price_Index_log ~ ., data = data_final))
set.seed(123)
# sample index for training data
trainIndex <- sample(seq_len(nrow(data_final)), size = 0.8 * nrow(data_final))
# Split the data into training and testing sets
data_train <- data_final[trainIndex, ]
data_test <- data_final[-trainIndex, ]
X_train <- model.matrix(House_Price_Index_log ~ ., data = data_train)[, -1]
y_train <- data_train$House_Price_Index_log
X_test <- model.matrix(House_Price_Index_log ~ ., data = data_test)[, -1]
y_test <- data_test$House_Price_Index_log
# OLS 1 Log-Log-----------------
# Perform linear regression
model <- lm(House_Price_Index_log ~ ., data = data_train)
summary(model)
{par(mfrow = c(1, 2))
# Plot residuals vs fitted values
plot(model, which = 1, main = "Residuals vs Fitted",cex.main=0.8)
# Plot QQ plot
plot(model, which = 2, main = "Normal Q-Q",cex.main=0.8)
}
# Predict and evaluate the model on the test set
predictions <- predict(model, newdata = data_test)
actuals <- data_test$House_Price_Index_log
# Calculate evaluation metric mse
mse_full <- mean((predictions - actuals)^2)
print(mse_full)
{plot(predictions, actuals, main = "Prediction vs Actual Values full model",
xlab = "Fitted Values", ylab = "Predictions")
abline(0,1, col = "red")}
# Variable Selection-----------
# F-test for the comparison of nested models
full.mod <- lm(House_Price_Index_log ~ ., data = data_train)
summary(full.mod)
# Remove energy
red.mod <- update(full.mod, . ~ . -Energy_Price_Index_log)
anova(red.mod, full.mod)
#Process of Variable dropping according to ther significance
# Energy does not improve model
summary(red.mod)
red.mod2 <- update(red.mod, . ~ . -Industrial_Inputs_Index_log)
anova(red.mod, red.mod2)
# Can safely remove industrial inputs log
summary(red.mod2)
# Remove finished_constructions_log
red.mod3 <- update(red.mod2, . ~ . -Finished_Constructions_log)
anova(red.mod2, red.mod3)
# Can safely remove finished constructions (but makes no sense)
summary(red.mod3)
summary(red.mod3)
{par(mfrow = c(1, 2))
# Plot residuals vs fitted values
plot(red.mod3, which = 1, main = "Residuals vs Fitted",cex.main=0.8)
# Plot QQ plot
plot(red.mod3, which = 2, main = "Normal Q-Q",cex.main=0.8)
}
# Predict and evaluate the model on the test set
predictions <- predict(red.mod3, newdata = data_test)
actuals <- data_test$House_Price_Index_log
# Calculate evaluation metric mse
mse_red <- mean((predictions - actuals)^2)
print(mse_red)
{plot(predictions, actuals, main = "Prediction vs Actual Values significance",
xlab = "Fitted Values", ylab = "Predictions")
abline(0,1, col = "red")}
# Using a a lag version of the House Price Index
data_final_with_lag<- data_final
data_final_with_lag$House_Price_Index_log_lag1 <- c(NA, head(data_final$House_Price_Index_log, -1))
data_final_with_lag <- na.omit(data_final_with_lag)
# Set the seed for reproducibility
set.seed(123)
trainIndex_lag <- sample(seq_len(nrow(data_final_with_lag)), size = 0.8 * nrow(data_final_with_lag))
# Split the data into training and testing sets
data_train_lag <- data_final_with_lag[trainIndex_lag, ]
data_test_lag <- data_final_with_lag[-trainIndex_lag, ]
X_train_lag <- model.matrix(House_Price_Index_log ~ ., data = data_train_lag)[, -1]
y_train_lag <- data_train_lag$House_Price_Index_log
X_test_lag <- model.matrix(House_Price_Index_log ~ ., data = data_test_lag)[, -1]
y_test_lag <- data_test_lag$House_Price_Index_log
model_lag <- lm(House_Price_Index_log ~ House_Price_Index_log_lag1 +Forex_Index_log+Industrial_Production_Index_log+Construction_Licences_Area_log+Google_Trends_Housing_log+Interest_Rate+Unemployment_Rate, data = data_train_lag)
# Summarize the model
summary(model_lag)
model_lag <- lm(House_Price_Index_log ~ House_Price_Index_log_lag1 +Forex_Index_log+Industrial_Production_Index_log+Construction_Licences_Area_log+Google_Trends_Housing_log+Interest_Rate, data = data_train_lag)
# Summarize the model
summary(model_lag)
library(lmtest)
# Necessary libraries to run all the code chunks and plots
library(readxl)
library(car)
library(lmtest)
library(zoo)
#Read the data using the read_excel function
#Change here for current data path
data <- read_excel("C:/Users/danie/Documents/GitHub/unipd_sl_24/data/data.xlsx",sheet = "dataframe_col")
#change the variables names to have more consistency
colnames(data) <- c('MY','date','House_Price_Index','Industrial_Inputs_Index','Metals_Price_Index','Energy_Price_Index','Shipping_Price_Index','Forex_Index','Unemployment_Rate','Industrial_Production_Index','Interest_Rate','Construction_Licences_Area','Finished_Constructions','Google_Trends_Housing')
# Counting NA values in each column
na_counts <- apply(data, 2, function(x) sum(is.na(x)))
# Print the counts of NA values per column
print(na_counts)
# Convert date column to Date type if it's not already
data$date <- as.Date(data$date)
# Copy the dataframe to avoid modifying the original one
data_filled <- data
# Find the indices where the date is at the end of a trimester
trimester_end_indices <- which(format(data$date, "%m") %in% c("03", "06", "09", "12"))
# Loop through each trimester end distribute the value
for (i in trimester_end_indices) {
if (i - 2 > 0) {
# Distribute the value to the current month and the previous two months
value_to_distribute <- data$Finished_Constructions[i] / 3
data_filled$Finished_Constructions[i] <- value_to_distribute
data_filled$Finished_Constructions[i - 1] <- value_to_distribute
data_filled$Finished_Constructions[i - 2] <- value_to_distribute
}
}
data_filled$Finished_Constructions <- na.locf(data_filled$Finished_Constructions, na.rm = FALSE)
# Removing rows with any NA values
clean_data <- na.omit(data_filled)
# Drop MY column
data_reduced <- subset(clean_data, select = -c(MY))
summary_stats <- summary(data_reduced[, !(names(data_reduced) %in% c("date"))])
# Function to detect outliers based on IQR
detect_outliers_single_var <- function(column) {
column <- na.omit(column)
Q1 <- quantile(column, 0.25, na.rm = TRUE)
Q3 <- quantile(column, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column[column < lower_bound | column > upper_bound]
return(outliers)
}
# List to store outliers for each variable
outliers_list <- list()
# Loop to determine outliers in each column
for (var in colnames(data_reduced[, !(names(data_reduced) %in% c("date"))])) {
if (is.numeric(data[[var]])) {
outliers_list[[var]] <- detect_outliers_single_var(data[[var]])
}
}
print(outliers_list)
{
par(mfrow = c(2, 2), mar = c(5, 4, 2, 2) + 0.1, oma = c(0, 0, 0, 0))
# First plot: Shipping Price Index
boxplot(data_reduced$Shipping_Price_Index, horizontal = TRUE, frame = FALSE, main = "Shipping Price Index")
# Second plot: Unemployment Rate
boxplot(data_reduced$Unemployment_Rate, horizontal = TRUE, frame = FALSE, main = "Unemployment Rate")
# Third plot: Interest Rate
boxplot(data_reduced$Interest_Rate, horizontal = TRUE, frame = FALSE, main = "Interest Rate")
# Fourth plot: Blank space
plot.new()
}
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1, 1))
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$House_Price_Index, type = "n", xaxt = "n",xlab="date", ylab = "House Price Index", main = "Evolution of House Prices over time",cex.axis=0.8)
# Add the categorical labels to the x-axis
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
# Add the lines and points to the plot
lines(1:length(data_reduced$category), data_reduced$House_Price_Index, type = "o", col = "blue", pch = 16)}
# Select subset of variables to difference
variables_to_calculate <- c("House_Price_Index", "Industrial_Inputs_Index", "Metals_Price_Index",
"Energy_Price_Index", "Shipping_Price_Index", "Forex_Index",
"Industrial_Production_Index", "Construction_Licences_Area",
"Finished_Constructions", "Google_Trends_Housing")
# Create a function to calculate the 12-month percentual variation
percentual_variation_12_months <- function(x) {
return((x / lag(x, n = 12) - 1))
}
lag <- function(x, n) {
c(rep(NA, n), head(x, -n))
}
data_percentual_variation <- data
# Apply the function to the select variables
for (var in variables_to_calculate) {
new_var_name <- paste0("pct_var_", var)
data_percentual_variation[[new_var_name]] <- percentual_variation_12_months(data[[var]])
}
# Select subset of variables to difference
variables_to_calculate <- c("House_Price_Index", "Industrial_Inputs_Index", "Metals_Price_Index",
"Energy_Price_Index", "Shipping_Price_Index", "Forex_Index",
"Industrial_Production_Index", "Construction_Licences_Area",
"Finished_Constructions", "Google_Trends_Housing")
# Create a function to calculate the 12-month percentual variation
percentual_variation_12_months <- function(x) {
return((x / lag(x, n = 12) - 1))
}
lag <- function(x, n) {
c(rep(NA, n), head(x, -n))
}
data_percentual_variation <- data
# Apply the function to the select variables
for (var in variables_to_calculate) {
new_var_name <- paste0("pct_var_", var)
data_percentual_variation[[new_var_name]] <- percentual_variation_12_months(data[[var]])
}
# Histograms/Boxplots of the percentual variations
# Subset only percentual changes
columns_to_select <- c("pct_var_House_Price_Index", "pct_var_Industrial_Inputs_Index", "pct_var_Metals_Price_Index",
"pct_var_Energy_Price_Index", "pct_var_Shipping_Price_Index", "pct_var_Forex_Index",
"pct_var_Industrial_Production_Index", "pct_var_Construction_Licences_Area",
"pct_var_Finished_Constructions", "pct_var_Google_Trends_Housing",
"Unemployment_Rate", "Interest_Rate")
data_percentual_variation <- data_percentual_variation[, columns_to_select]
data_percentual_variation$time_index<- seq(1,nrow(data_percentual_variation))
{
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1, 2))
# Boxplot with color scale for time index
boxplot(data_percentual_variation$pct_var_House_Price_Index, horizontal = TRUE, frame = FALSE,
main = "Boxplot of Percentual Variation House Price Index",
ylab = "Percentual Variation", xlab = "", col = "lightgray", border = "black")
# Generate color scale based on time index
colors <- colorRampPalette(c("green", "red"))(length(data_percentual_variation$time_index))
colored_points <- colors[rank(data_percentual_variation$time_index)]
# Overlay points on the boxplot
points(data_percentual_variation$pct_var_House_Price_Index, rep(1, nrow(data_percentual_variation)),
col = colored_points, pch = 19)
# Add a legend for the color scale
legend("topright", legend = c("Oldest", "Newest"),
fill = c(colors[1], colors[length(colors)]), title = "Time Index")
# Histogram of Percentual Variation House Price Index
hist(data_percentual_variation$pct_var_House_Price_Index, breaks = 40,
main = "Histogram of Percentual Variation House Price Index",
xlab = "Percentual Variation")}
# Histograms/Boxplots of the percentual variations
# Subset only percentual changes
columns_to_select <- c("pct_var_House_Price_Index", "pct_var_Industrial_Inputs_Index", "pct_var_Metals_Price_Index",
"pct_var_Energy_Price_Index", "pct_var_Shipping_Price_Index", "pct_var_Forex_Index",
"pct_var_Industrial_Production_Index", "pct_var_Construction_Licences_Area",
"pct_var_Finished_Constructions", "pct_var_Google_Trends_Housing",
"Unemployment_Rate", "Interest_Rate")
data_percentual_variation <- data_percentual_variation[, columns_to_select]
data_percentual_variation$time_index<- seq(1,nrow(data_percentual_variation))
{
par(mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(1, 2))
# Boxplot with color scale for time index
boxplot(data_percentual_variation$pct_var_House_Price_Index, horizontal = TRUE, frame = FALSE,
main = "Boxplot of Percentual Variation House Price Index",
ylab = "Percentual Variation", xlab = "", col = "lightgray", border = "black")
# Generate color scale based on time index
colors <- colorRampPalette(c("green", "red"))(length(data_percentual_variation$time_index))
colored_points <- colors[rank(data_percentual_variation$time_index)]
# Overlay points on the boxplot
points(data_percentual_variation$pct_var_House_Price_Index, rep(1, nrow(data_percentual_variation)),
col = colored_points, pch = 19)
# Add a legend for the color scale
legend("topright", legend = c("Oldest", "Newest"),
fill = c(colors[1], colors[length(colors)]), title = "Time Index")
# Histogram of Percentual Variation House Price Index
hist(data_percentual_variation$pct_var_House_Price_Index, breaks = 40,
main = "Histogram of Percentual Variation House Price Index",
xlab = "Percentual Variation")}
{par(mfrow = c(3,4 ), mar = c(2, 2, 2, 2) + 0.1)
data_percentual_variation <- data_percentual_variation[, columns_to_select]
for (i in 1:ncol(data_percentual_variation)) {
hist(data_percentual_variation[[i]],
main = substr(names(data_percentual_variation)[i], 1, 25), # Shorten title if necessary
xlab = names(data_percentual_variation)[i],
col = "blue",
border = "black",
cex.main=0.7)
}
}
# reset margins
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Reset margins
par(mar = c(5.1, 4.1, 4.1, 2.1))
# Set up a 2x2 plotting space
{par(mfrow = c(2, 2))
# First plot: Evolution of Shipping Prices Index over time
plot(1:length(data_reduced$category), clean_data$Shipping_Price_Index, type = "n", xaxt = "n",
xlab = "date", ylab = "Shipping Price Index", main = "Evolution of Shipping Prices Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$Shipping_Price_Index, type = "o", col = "blue", pch = 16)
# Second plot: Evolution of Finished constructions over time
plot(1:length(data_reduced$category), clean_data$Finished_Constructions, type = "n", xaxt = "n",
xlab = "date", ylab = "Energy Price Index", main = "Evolution of Finished constructions over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$Finished_Constructions, type = "o", col = "blue", pch = 16)
# Third plot: Evolution of Industrial Production Index over time
plot(1:length(data_reduced$category), clean_data$Industrial_Production_Index, type = "n", xaxt = "n",
xlab = "date", ylab = "Industry Production Index", main = "Evolution of Industrial Production Index over time")
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
lines(1:length(data_reduced$category), data_reduced$Industrial_Production_Index, type = "o", col = "blue", pch = 16)
# Fourth plot: Blank space
plot.new()}
#Log transformation of the variables
variables_to_log <- c("House_Price_Index", "Industrial_Inputs_Index", "Metals_Price_Index",
"Energy_Price_Index", "Shipping_Price_Index", "Forex_Index",
"Industrial_Production_Index", "Construction_Licences_Area",
"Finished_Constructions", "Google_Trends_Housing")
for (var in variables_to_log) {
log_var_name <- paste0(var, "_log")
data_reduced[[log_var_name]] <- log(data_reduced[[var]])
}
# Subset the dataframe
selected_columns <- c(paste0(variables_to_log, "_log"), "Unemployment_Rate", "Interest_Rate")
data_final <- data_reduced[, selected_columns]
cov_matrix <- cov(data_final)
cov_matrix
correl_matrix <- cor(data_final)
correl_matrix
print(correl_matrix)
# Plot the correlation matrix
{par(mar = c(7, 7, 7, 2) + 0.1)
cor_matrix<-correl_matrix
image(1:ncol(cor_matrix), 1:nrow(cor_matrix), t(cor_matrix)[, ncol(cor_matrix):1],
axes = FALSE, xlab = "", ylab = "", col = colorRampPalette(c("red", "white", "blue"))(20))
# Add axis labels
axis(3, at = 1:ncol(cor_matrix), labels = colnames(cor_matrix), las = 2, cex.axis = 0.7)
axis(2, at = 1:nrow(cor_matrix), labels = rev(rownames(cor_matrix)), las = 2, cex.axis = 0.7)
#correlation coefficients
for (i in 1:ncol(cor_matrix)) {
for (j in 1:nrow(cor_matrix)) {
text(i, nrow(cor_matrix) - j + 1, round(cor_matrix[i, j], 2), cex = 0.7)
}
}}
# here a value bigger than 10 is supposed to have high multicolinearity
vif_values <-vif(lm(House_Price_Index_log ~ ., data = data_final))
vif_values
# some variables like shipping, industrial prod, metals and industrial input are high,
# Metals and industrial inputs are very similar / metals is a part of industrial inputs,
# drop metals
data_final$Metals_Price_Index_log<- NULL
# re run multicoliniarity
vif(lm(House_Price_Index_log ~ ., data = data_final))
set.seed(123)
# sample index for training data
trainIndex <- sample(seq_len(nrow(data_final)), size = 0.8 * nrow(data_final))
# Split the data into training and testing sets
data_train <- data_final[trainIndex, ]
data_test <- data_final[-trainIndex, ]
X_train <- model.matrix(House_Price_Index_log ~ ., data = data_train)[, -1]
y_train <- data_train$House_Price_Index_log
X_test <- model.matrix(House_Price_Index_log ~ ., data = data_test)[, -1]
y_test <- data_test$House_Price_Index_log
# OLS 1 Log-Log-----------------
# Perform linear regression
model <- lm(House_Price_Index_log ~ ., data = data_train)
summary(model)
