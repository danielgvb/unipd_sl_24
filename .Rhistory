# Create new log-transformed variables
data_reduced <- data_reduced %>%
mutate(across(c(y, industrial_inputs, metals, energy, shipping, fx,
industrial_prod, construction_licences_area,finished_constructions,
google_trends),
list(log = ~log(.)), .names = "{.col}_log"))
# Necessary libraries to run all the code chunks and plots
library(readxl)
library(dplyr)
library(car)
library(lmtest)
library(zoo)
library(caret)
# Data Uploading
```{r}
View(data)
#Read the data using the read_excel function
#Change here for current data path
data <- read_excel("C:/Users/CAMILO/Documents/GitHub/unipd_sl_24/data/data.xlsx",sheet = "dataframe_col")
View(data)
#Present the first 5 rows of the data
head(data,5)
# Counting NA values in each column
na_counts <- apply(data, 2, function(x) sum(is.na(x)))
# Print the counts of NA values per column
print(na_counts)
# Interpolate finished_constructions
# Interpolate NA values in the finished_constructions column
# Interpolate internal NA values in the finished_constructions column
data$finished_constructions <- na.approx(data$finished_constructions, na.rm = FALSE)
# Fill leading NA values with the first non-NA value
data$finished_constructions <- na.locf(data$finished_constructions, na.rm = FALSE, fromLast = FALSE)
# Fill trailing NA values with the last non-NA value
data$finished_constructions <- na.locf(data$finished_constructions, na.rm = FALSE, fromLast = TRUE)
# Removing rows with any NA values
clean_data <- na.omit(data)
data_reduced <- subset(clean_data, select = -c(MY))
View(data_reduced)
# View description --------------
# Get the summary of the dataframe
summary_stats <- summary(select(data_reduced,-date))
# Print the summary statistics
print(summary_stats)
# Create new log-transformed variables
data_reduced <- data_reduced %>%
mutate(across(c(y, industrial_inputs, metals, energy, shipping, fx,
industrial_prod, construction_licences_area,finished_constructions,
google_trends),
list(log = ~log(.)), .names = "{.col}_log"))
# Subset the dataframe by selecting specific columns
data_final <- data_reduced %>%
select(y_log, industrial_inputs_log, metals_log, energy_log,
shipping_log, fx_log,industrial_prod_log,
construction_licences_area_log, finished_constructions_log,google_trends_log,
unemployment, interest_rate)
# Subset only percentual changes
data_percentual_variation <- data_percentual_variation %>%
select(pct_var_y, pct_var_industrial_inputs, pct_var_metals, pct_var_energy,
pct_var_shipping, pct_var_fx,pct_var_industrial_prod,
pct_var_construction_licences_area, pct_var_finished_constructions,
pct_var_google_trends,
unemployment, interest_rate)
# Create new log-transformed variables
data_reduced <- data_reduced %>%
mutate(across(c(y, industrial_inputs, metals, energy, shipping, fx,
industrial_prod, construction_licences_area,finished_constructions,
google_trends),
list(log = ~log(.)), .names = "{.col}_log"))
# Subset the dataframe by selecting specific columns
data_final <- data_reduced %>%
select(y_log, industrial_inputs_log, metals_log, energy_log,
shipping_log, fx_log,industrial_prod_log,
construction_licences_area_log, finished_constructions_log,google_trends_log,
unemployment, interest_rate)
# reset margins
par(mfrow = c(1, 1))
# dependent variable
data_reduced$category <- as.factor(clean_data$date)
# Set up the plot without drawing the points
{plot(1:length(data_reduced$category), clean_data$y, type = "n", xaxt = "n",xlab="date", ylab = "Home Price Index", main = "Evolution of Home Prices over time")
# Add the categorical labels to the x-axis
axis(1, at = 1:length(data_reduced$category), labels = data_reduced$category)
# Add the lines and points to the plot
lines(1:length(data_reduced$category), data_reduced$y, type = "o", col = "blue", pch = 16)}
# Create Differences (Inflation)
colnames(data_reduced)
# Select subset of variables to difference
variables_to_calculate <- c("y", "industrial_inputs", "metals",
"energy", "shipping", "fx", "industrial_prod",
"construction_licences_area", "finished_constructions",
"google_trends")
# Create a function to calculate the 12-month percentual variation
percentual_variation_12_months <- function(x) {
return((x / dplyr::lag(x, n = 12) - 1))
}
# Apply the function to the subset of variables
data_percentual_variation <- data %>%
mutate(across(all_of(variables_to_calculate), percentual_variation_12_months, .names = "pct_var_{col}"))
View(data_percentual_variation)
# Histograms/Boxplots of the percentual variations
# Subset only percentual changes
data_percentual_variation <- data_percentual_variation %>%
select(pct_var_y, pct_var_industrial_inputs, pct_var_metals, pct_var_energy,
pct_var_shipping, pct_var_fx,pct_var_industrial_prod,
pct_var_construction_licences_area, pct_var_finished_constructions,
pct_var_google_trends,
unemployment, interest_rate)
par(mfrow = c(1, 2))
# Y
{boxplot(data_percentual_variation$pct_var_y , horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
hist(data_percentual_variation$pct_var_y , breaks=40,main = "Histogram of Percentual Variation Y",xlab = "Percentual Variation")}
# Create Differences (Inflation)
colnames(data_reduced)
# Select subset of variables to difference
variables_to_calculate <- c("y", "industrial_inputs", "metals",
"energy", "shipping", "fx", "industrial_prod",
"construction_licences_area", "finished_constructions",
"google_trends")
# Create a function to calculate the 12-month percentual variation
percentual_variation_12_months <- function(x) {
return((x / dplyr::lag(x, n = 12) - 1))
}
# Apply the function to the subset of variables
data_percentual_variation <- data %>%
mutate(across(all_of(variables_to_calculate), percentual_variation_12_months, .names = "pct_var_{col}"))
# Histograms-----------------
par(mar = c(2, 2, 2, 2))  # Adjust margins to make them smaller
# Adjust layout to fit all histograms
par(mfrow = c(3, 5))  # Example layout; adjust if necessary
# Histograms for each variable
for (i in 1:ncol(data_percentual_variation)) {
hist(data_percentual_variation[[i]], main = names(data_percentual_variation)[i], xlab = names(data_percentual_variation)[i], col = "blue", border = "black")
}
View(data_percentual_variation)
# Histograms-----------------
par(mar = c(2, 2, 2, 2))  # Adjust margins to make them smaller
# Adjust layout to fit all histograms
par(mfrow = c(3, 5))  # Example layout; adjust if necessary
# Histograms for each variable
for (i in 1:ncol(data_percentual_variation)) {
hist(data_percentual_variation[[i]], main = names(data_percentual_variation)[i], xlab = names(data_percentual_variation)[i], col = "blue", border = "black")
}
# Histograms for each variable
{
for (i in 1:ncol(data_percentual_variation)) {
hist(data_percentual_variation[[i]], main = names(data_percentual_variation)[i], xlab = names(data_percentual_variation)[i], col = "blue", border = "black")
}
}
View(data_percentual_variation)
# Histograms/Boxplots of the percentual variations
# Subset only percentual changes
data_percentual_variation <- data_percentual_variation %>%
select(pct_var_y, pct_var_industrial_inputs, pct_var_metals, pct_var_energy,
pct_var_shipping, pct_var_fx,pct_var_industrial_prod,
pct_var_construction_licences_area, pct_var_finished_constructions,
pct_var_google_trends,
unemployment, interest_rate)
View(data_percentual_variation)
par(mfrow = c(1, 2))
# Y
{boxplot(data_percentual_variation$pct_var_y , horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
hist(data_percentual_variation$pct_var_y , breaks=40,main = "Histogram of Percentual Variation Y",xlab = "Percentual Variation")}
# Histograms-----------------
par(mar = c(2, 2, 2, 2))  # Adjust margins to make them smaller
# Adjust layout to fit all histograms
par(mfrow = c(3, 5))  # Example layout; adjust if necessary
for (i in 1:ncol(data_percentual_variation)) {
hist(data_percentual_variation[[i]], main = names(data_percentual_variation)[i], xlab = names(data_percentual_variation)[i], col = "blue", border = "black")
}
# Reset layout
par(mfrow = c(1, 1))
pairs(data_percentual_variation)
pairs(data_percentual_variation)
# Boxplot for all at once
#install.packages("reshape2")
library(reshape2)
# Melt the dataframe to long format
# Melt the dataframe to long format
data_long <- melt(data_percentual_variation)
# Adjust graphical parameters
par(mar = c(7, 5, 4, 2) + 0.1)  # Increase bottom margin
# Adjust graphical parameters
par(mar = c(7, 5, 4, 2) + 0.1)  # Increase bottom margin
# Create the boxplot without x-axis labels
{boxplot(value ~ variable, data = data_long,
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
View(data_reduced)
# Function to detect outliers based on IQR
df=select(data_reduced,-date)
detect_outliers <- function(df) {
outlier_bounds <- df %>%
summarise(across(everything(), list(
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE)
)))
bounds <- outlier_bounds %>%
mutate(across(everything(), list(
IQR = ~Q3 - Q1,
lower_bound = ~Q1 - 1.5 * IQR,
upper_bound = ~Q3 + 1.5 * IQR
))) %>%
select(ends_with("_lower_bound"), ends_with("_upper_bound"))
outliers <- lapply(names(df), function(var) {
lower_bound <- bounds[[paste0(var, "_lower_bound")]]
upper_bound <- bounds[[paste0(var, "_upper_bound")]]
df %>% filter((!!sym(var) < lower_bound) | (!!sym(var) > upper_bound)) %>% select(all_of(var))
})
names(outliers) <- names(df)
return(outliers)
}
# Detect outliers in the dataset
outliers <- detect_outliers(data)
# Removing rows with any NA values
clean_data <- na.omit(data)
data_reduced <- subset(clean_data, select = -c(MY))
View(data_reduced)
# View description --------------
# Get the summary of the dataframe
summary_stats <- summary(select(data_reduced,-date))
# Print the summary statistics
print(summary_stats)
# Function to detect outliers based on IQR
df=select(data_reduced,-date)
detect_outliers <- function(df) {
outlier_bounds <- df %>%
summarise(across(everything(), list(
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE)
)))
bounds <- outlier_bounds %>%
mutate(across(everything(), list(
IQR = ~Q3 - Q1,
lower_bound = ~Q1 - 1.5 * IQR,
upper_bound = ~Q3 + 1.5 * IQR
))) %>%
select(ends_with("_lower_bound"), ends_with("_upper_bound"))
outliers <- lapply(names(df), function(var) {
lower_bound <- bounds[[paste0(var, "_lower_bound")]]
upper_bound <- bounds[[paste0(var, "_upper_bound")]]
df %>% filter((!!sym(var) < lower_bound) | (!!sym(var) > upper_bound)) %>% select(all_of(var))
})
names(outliers) <- names(df)
return(outliers)
}
View(df)
View(df)
# Necessary libraries to run all the code chunks and plots
library(readxl)
library(dplyr)
library(car)
library(lmtest)
library(zoo)
library(caret)
#Read the data using the read_excel function
#Change here for current data path
data <- read_excel("C:/Users/CAMILO/Documents/GitHub/unipd_sl_24/data/data.xlsx",sheet = "dataframe_col")
View(data)
#Present the first 5 rows of the data
head(data,5)
# Counting NA values in each column
na_counts <- apply(data, 2, function(x) sum(is.na(x)))
# Print the counts of NA values per column
print(na_counts)
# Interpolate finished_constructions
# Interpolate NA values in the finished_constructions column
# Interpolate internal NA values in the finished_constructions column
data$finished_constructions <- na.approx(data$finished_constructions, na.rm = FALSE)
# Fill leading NA values with the first non-NA value
data$finished_constructions <- na.locf(data$finished_constructions, na.rm = FALSE, fromLast = FALSE)
# Fill trailing NA values with the last non-NA value
data$finished_constructions <- na.locf(data$finished_constructions, na.rm = FALSE, fromLast = TRUE)
# Fill trailing NA values with the last non-NA value
data$finished_constructions <- na.locf(data$finished_constructions, na.rm = FALSE, fromLast = TRUE)
# Removing rows with any NA values
clean_data <- na.omit(data)
data_reduced <- subset(clean_data, select = -c(MY))
View(data_reduced)
# View description --------------
# Get the summary of the dataframe
summary_stats <- summary(select(data_reduced,-date))
# Print the summary statistics
print(summary_stats)
detect_outliers <- function(df) {
outlier_bounds <- df %>%
summarise(across(everything(), list(
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE)
)))
bounds <- outlier_bounds %>%
mutate(across(everything(), list(
IQR = ~Q3 - Q1,
lower_bound = ~Q1 - 1.5 * IQR,
upper_bound = ~Q3 + 1.5 * IQR
))) %>%
select(ends_with("_lower_bound"), ends_with("_upper_bound"))
outliers <- lapply(names(df), function(var) {
lower_bound <- bounds[[paste0(var, "_lower_bound")]]
upper_bound <- bounds[[paste0(var, "_upper_bound")]]
df %>% filter((!!sym(var) < lower_bound) | (!!sym(var) > upper_bound)) %>% select(all_of(var))
})
names(outliers) <- names(df)
return(outliers)
}
# Detect outliers in the dataset
outliers <- detect_outliers(select(data_reduced,-date))
detect_outliers <- function(df) {
outlier_bounds <- df %>%
summarise(across(everything(), list(
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE)
)))
bounds <- outlier_bounds %>%
rowwise() %>%
mutate(across(everything(), list(
IQR = ~ get(paste0(cur_column(), "_Q3")) - get(paste0(cur_column(), "_Q1")),
lower_bound = ~ get(paste0(cur_column(), "_Q1")) - 1.5 * get(paste0(cur_column(), "_IQR")),
upper_bound = ~ get(paste0(cur_column(), "_Q3")) + 1.5 * get(paste0(cur_column(), "_IQR"))
))) %>%
ungroup() %>%
select(ends_with("_lower_bound"), ends_with("_upper_bound"))
outliers <- lapply(names(df), function(var) {
lower_bound <- bounds[[paste0(var, "_lower_bound")]]
upper_bound <- bounds[[paste0(var, "_upper_bound")]]
df %>% filter((!!sym(var) < lower_bound) | (!!sym(var) > upper_bound)) %>% select(all_of(var))
})
names(outliers) <- names(df)
return(outliers)
}
# Detect outliers in the dataset
outliers <- detect_outliers(select(data_reduced,-date))
# Function to detect outliers based on IQR
# Function to calculate outliers for a single variable
detect_outliers_single_var <- function(column) {
Q1 <- quantile(column, 0.25, na.rm = TRUE)
Q3 <- quantile(column, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column[column < lower_bound | column > upper_bound]
return(outliers)
}
# List to store outliers for each variable
outliers_list <- list()
# Loop through each column in the dataset and calculate outliers
for (var in colnames(select(data_reduced,-date))) {
if (is.numeric(data[[var]])) {
outliers_list[[var]] <- detect_outliers_single_var(data[[var]])
}
}
# Print outliers for each variable
print(outliers_list)
# Function to detect outliers based on IQR
# Function to calculate outliers for a single variable
detect_outliers_single_var <- function(column) {
column <- na.omit(column)
Q1 <- quantile(column, 0.25, na.rm = TRUE)
Q3 <- quantile(column, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column[column < lower_bound | column > upper_bound]
return(outliers)
}
# List to store outliers for each variable
outliers_list <- list()
# Loop through each column in the dataset and calculate outliers
for (var in colnames(select(data_reduced,-date))) {
if (is.numeric(data[[var]])) {
outliers_list[[var]] <- detect_outliers_single_var(data[[var]])
}
}
# Print outliers for each variable
print(outliers_list)
# pairs(data_reduced) # does not say much
```
# Log-transformation
# Print outliers for each variable
print(outliers_list)
# Create the boxplot without x-axis labels
{boxplot(value ~ variable, data = select(data_reduced,-date),
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
# Create the boxplot without x-axis labels
{boxplot(data = select(data_reduced,-date),
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
# Create the boxplot without x-axis labels
{boxplot( data = select(data_reduced,-date),,
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
data_long <- melt(data_reduced,-date)
data_long <- melt(select(data_reduced,-date))
{boxplot( data = data_long,
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
# Add custom x-axis labels at a 45-degree angle
labels <- levels(data_long$variable)
text(x = 1:length(labels), y = par("usr")[3] - 0.5, labels = labels, srt = 45, adj = 1, xpd = TRUE, cex = 0.8)
}
data_long <- melt(select(data_reduced,-date))
{boxplot( value ~ variable,data = data_long,
main = "Boxplot of Multiple Variables",
xlab = "", ylab = "Value",
col = "lightblue", border = "darkblue", xaxt = 'n')
}
# Create the boxplot without x-axis labels
{boxplot(data_reduced$shipping , horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
}
# Create the boxplot without x-axis labels
{boxplot(data_reduced$y , horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
}
# Create the boxplot without x-axis labels
{boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of Percentual Variation Y")
}
# Create the boxplot without x-axis labels
par(mfrow = c(3, 1))
{boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
}
{boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
}
{boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
{
par(mfrow = c(3, 1))
boxplot(data_reduced$shipping, horizontal=TRUE  ,frame=F,main = "Boxplot of shipping")
boxplot(data_reduced$unemployment, horizontal=TRUE  ,frame=F,main = "Unmeployment")
boxplot(data_reduced$interest_rate, horizontal=TRUE  ,frame=F,main = "Interest rate")
}
#Read the data using the read_excel function
#Change here for current data path
data <- read_excel("C:/Users/CAMILO/Documents/GitHub/unipd_sl_24/data/data.xlsx",sheet = "dataframe_col")
View(data)
